class Solution {
    private boolean backtrack(int i, int j, int curr, char[][] board, String word, boolean[][] visited) {
        if (curr == word.length()) return true;

        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(curr)) {
            return false;
        }

        visited[i][j] = true;
        boolean found = backtrack(i - 1, j, curr + 1, board, word, visited) ||
                        backtrack(i + 1, j, curr + 1, board, word, visited) ||
                        backtrack(i, j - 1, curr + 1, board, word, visited) ||
                        backtrack(i, j + 1, curr + 1, board, word, visited);

        visited[i][j] = false;
        return found;
    }

    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0) && backtrack(i, j, 0, board, word, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
}
